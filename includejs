#!/usr/bin/env node

!function(w) {


    
    
	require('./node/app.help.js');    
	require('./src/libjs/class.js');
	require('./src/libjs/include.node.js');

    var program = require('commander');

    
    global.socketio = require('socket.io');
     
    
    include.cfg({
		path: 'file:///' + __dirname + '/',
        lockedToFolder: true
	}).routes({
		framework: '/src/libjs/{0}.js',
		handler: '/src/handler/{0}.js',
		parser: '/src/parser/{0}.js',
		action: '/src/action/{0}.js',
		script: '/src/{0}.js',
        helper: '/src/helper/{0}.js',
        base: '/src/base/{0}.js'
	}).js({
		framework: ['net/uri', 'utils', 'arr'],
        parser: ['config'],
		script: [ //
		'sys', //
		'helpers', //
		'io/package', //
		],

	}).done(function() {
        
		
		if (!(global.config && global.config.state == 4)){
			console.error('Invalid Config', global.config)
			return 0;
		}
		
        switch (global.config.action) {
		case '':
		case null:
			return console.error("Invalid Arguments Count");
		case 'template':
			include.js('/src/action/template.js');
			break;
		case 'reference':
			include.js('/src/action/reference.js');
			break;
		case 'globals':
			require('openurl').open(io.env.applicationDir.combine('globals.txt').toString());
			break;
		case 'git-clone':
			include.js('/src/action/gitclone.js');
			break;
        case 'server':
            include.js('/src/server/server.js');            
            break;
		default:			
			include.js('/src/project/solutionWorker.js');            
			break;
		}
		return 1;
	});


}(global.window || (global.window = global));